{"ast":null,"code":"var _jsxFileName = \"/Users/mmt8621/Projects/react-redux udemy/stream/client/src/components/streams/StreamCreate.js\";\nimport React from 'react';\nimport { Field, formValues, reduxForm } from 'redux-form';\n\nclass StreamCreate extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.renderInput = ({\n      input,\n      label,\n      meta\n    }) => {\n      // console.log(meta);\n      const className = `field ${meta.error && meta.touched ? 'error' : ''}`;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: className,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 10,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 11,\n          columnNumber: 12\n        }\n      }, label), /*#__PURE__*/React.createElement(\"input\", Object.assign({}, input, {\n        autoComplete: \"off\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 12,\n          columnNumber: 9\n        }\n      })), this.renderError(meta));\n    };\n\n    this.renderError = ({\n      error,\n      touched\n    }) => {\n      if (touched && error) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"ui error message\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 21,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"header\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 22,\n            columnNumber: 21\n          }\n        }, error));\n      }\n    };\n  }\n\n  onSubmit(formValues) {\n    console.log(formValues);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.props.handleSubmit(this.onSubmit),\n      className: \"ui form error\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Field, {\n      name: \"title\",\n      component: this.renderInput,\n      label: \"enter title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Field, {\n      name: \"description\",\n      component: this.renderInput,\n      label: \"enter description\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"ui button primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }\n    }, \"Submit\"));\n  }\n\n}\n\nconst validate = formValues => {\n  const erros = {};\n\n  if (!formValues.title) {\n    erros.title = 'you must enter a title';\n  }\n\n  if (!formValues.description) {\n    erros.description = 'you must enter a description';\n  }\n\n  return erros;\n};\n\nexport default reduxForm({\n  form: 'streamCreate',\n  validate\n})(StreamCreate);","map":{"version":3,"sources":["/Users/mmt8621/Projects/react-redux udemy/stream/client/src/components/streams/StreamCreate.js"],"names":["React","Field","formValues","reduxForm","StreamCreate","Component","renderInput","input","label","meta","className","error","touched","renderError","onSubmit","console","log","render","props","handleSubmit","validate","erros","title","description","form"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,KAAR,EAAeC,UAAf,EAA2BC,SAA3B,QAA4C,YAA5C;;AAEA,MAAMC,YAAN,SAA2BJ,KAAK,CAACK,SAAjC,CAA0C;AAAA;AAAA;;AAAA,SAEtCC,WAFsC,GAE1B,CAAE;AAACC,MAAAA,KAAD;AAAQC,MAAAA,KAAR;AAAeC,MAAAA;AAAf,KAAF,KAA0B;AAClC;AACA,YAAMC,SAAS,GAAE,SAAQD,IAAI,CAACE,KAAL,IAAcF,IAAI,CAACG,OAAnB,GAA6B,OAA7B,GAAuC,EAAG,EAAnE;AACA,0BACI;AAAK,QAAA,SAAS,EAAEF,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAQF,KAAR,CADC,eAEJ,+CAAYD,KAAZ;AAAmB,QAAA,YAAY,EAAC,KAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAFI,EAGH,KAAKM,WAAL,CAAiBJ,IAAjB,CAHG,CADJ;AAOH,KAZqC;;AAAA,SActCI,WAdsC,GAc1B,CAAC;AAAEF,MAAAA,KAAF;AAASC,MAAAA;AAAT,KAAD,KAAqB;AAC7B,UAAGA,OAAO,IAAID,KAAd,EAAoB;AAChB,4BACI;AAAK,UAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACI;AAAK,UAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACKA,KADL,CADJ,CADJ;AAOH;AACJ,KAxBqC;AAAA;;AA0BtCG,EAAAA,QAAQ,CAACZ,UAAD,EAAY;AAChBa,IAAAA,OAAO,CAACC,GAAR,CAAYd,UAAZ;AACH;;AACDe,EAAAA,MAAM,GAAE;AACJ,wBACI;AAAM,MAAA,QAAQ,EAAE,KAAKC,KAAL,CAAWC,YAAX,CAAwB,KAAKL,QAA7B,CAAhB;AAAwD,MAAA,SAAS,EAAC,eAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,OAAZ;AAAoB,MAAA,SAAS,EAAE,KAAKR,WAApC;AAAiD,MAAA,KAAK,EAAC,aAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,eAEI,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,aAAZ;AAA0B,MAAA,SAAS,EAAE,KAAKA,WAA1C;AAAuD,MAAA,KAAK,EAAC,mBAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,eAGI;AAAQ,MAAA,SAAS,EAAC,mBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHJ,CADJ;AAUH;;AAxCqC;;AA2C1C,MAAMc,QAAQ,GAAElB,UAAD,IAAc;AACzB,QAAMmB,KAAK,GAAC,EAAZ;;AACA,MAAG,CAACnB,UAAU,CAACoB,KAAf,EAAqB;AACjBD,IAAAA,KAAK,CAACC,KAAN,GAAY,wBAAZ;AACH;;AAED,MAAG,CAACpB,UAAU,CAACqB,WAAf,EAA2B;AACvBF,IAAAA,KAAK,CAACE,WAAN,GAAkB,8BAAlB;AACH;;AACD,SAAOF,KAAP;AACH,CAVD;;AAYA,eAAelB,SAAS,CAAC;AACrBqB,EAAAA,IAAI,EAAE,cADe;AAErBJ,EAAAA;AAFqB,CAAD,CAAT,CAGZhB,YAHY,CAAf","sourcesContent":["import React from 'react';\nimport {Field, formValues, reduxForm } from 'redux-form';\n\nclass StreamCreate extends React.Component{\n\n    renderInput=( {input, label, meta} )=>{\n        // console.log(meta);\n        const className=`field ${meta.error && meta.touched ? 'error' : ''}`\n        return (\n            <div className={className}>\n           <label>{label}</label>\n        <input { ...input} autoComplete=\"off\" />\n        {this.renderError(meta)}\n        </div>\n        )\n    }\n\n    renderError=({ error, touched})=>{\n        if(touched && error){\n            return(\n                <div className=\"ui error message\">\n                    <div className=\"header\">\n                        {error}\n                    </div>\n                </div>\n            )\n        }\n    }\n    \n    onSubmit(formValues){\n        console.log(formValues);\n    }\n    render(){\n        return(\n            <form onSubmit={this.props.handleSubmit(this.onSubmit)} className=\"ui form error\" >\n                <Field name=\"title\" component={this.renderInput} label=\"enter title\" />\n                <Field name=\"description\" component={this.renderInput} label=\"enter description\" />\n                <button className=\"ui button primary\">\n                    Submit\n                </button>\n            </form>\n        \n        )\n    }\n}\n\nconst validate=(formValues)=>{\n    const erros={};\n    if(!formValues.title){\n        erros.title='you must enter a title';\n    }\n\n    if(!formValues.description){\n        erros.description='you must enter a description';\n    }\n    return erros;\n}\n\nexport default reduxForm({\n    form: 'streamCreate',\n    validate\n})(StreamCreate);"]},"metadata":{},"sourceType":"module"}